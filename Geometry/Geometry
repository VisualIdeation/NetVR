/*******************************************************************
Copyright (c) 2006-2008 Braden Pellett and Jordan Van Aalsburg

This file is part of NetVR.

NetVR is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

NetVR is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with NetVR.  If not, see <http://www.gnu.org/licenses/>.
*******************************************************************/

#include <Geometry/SplineCurve.h>
#include <Geometry/ClosePointSet.h>
#include <Geometry/Point.h>
#include <Geometry/OrthogonalTransformation.h>
#include <Geometry/SplinePatch.h>
#include <Geometry/RotationTransformation.h>
#include <Geometry/Polygon.h>
//#include <Geometry/PointKdTree.h>
//#include <Geometry/ArrayKdTree.h>
//#include <Geometry/PointOctree.h>
#include <Geometry/Sphere.h>
#include <Geometry/OrthonormalTransformation.h>
#include <Geometry/Box.h>
#include <Geometry/Vector.h>
#include <Geometry/ValuedPoint.h>
#include <Geometry/UniformScalingTransformation.h>
#include <Geometry/HitResult.h>
#include <Geometry/GeometryValueCoders.h>
#include <Geometry/SolidHitResult.h>
#include <Geometry/Ray.h>
#include <Geometry/ProjectiveTransformation.h>
#include <Geometry/ComponentArray.h>
#include <Geometry/Rotation.h>
#include <Geometry/HVector.h>
#include <Geometry/Matrix.h>
#include <Geometry/TranslationTransformation.h>
#include <Geometry/Plane.h>
#include <Geometry/Cylinder.h>
#include <Geometry/PointTwoNTree.h>
#include <Geometry/PolygonMesh.h>
#include <Geometry/AffineCombiner.h>
#include <Geometry/AffineTransformation.h>
#include <Geometry/ScalingTransformation.h>

// makes errors
// #include <Geometry/Cone.h>
// #include <Geometry/MatrixHelperFunctions.h>

#ifndef GEOMETRY_EXTENSIONS
#define GEOMETRY_EXTENSIONS

namespace Geometry {

template <class ScalarParam>
inline ScalarParam dot(const Vector<ScalarParam,3>& v1,const Vector<ScalarParam,3>& v2)
{
	return ScalarParam(v1[0]*v2[0] + v1[1]*v2[1] + v1[2]*v2[2]);
}

template <class ScalarParam>
inline ScalarParam mag(const Vector<ScalarParam,3>& v)
{
	return ScalarParam(Math::sqrt(v[0]*v[0] + v[1]*v[1] + v[2]*v[2]));
}

}

#endif
